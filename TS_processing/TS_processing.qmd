---
title: Timeseries processing"
format: 
    html:
        code-fold: true
jupyter: tsprocess
---



# SOUND

## Amplitude envelope

```{python}

import numpy as np
from scipy.signal import hilbert
from scipy.interpolate import interp1d
import librosa
import pandas as pd

def amplitude_envelope_extract(locationsound, smoothing_hz, resampled_hz):
    # read the sound file into Python
    snd, fs = librosa.load(locationsound, sr=None)
    
    # apply the hilbert transform on the signal
    hilb = hilbert(snd)
    
    # apply complex modulus
    env = np.abs(hilb)
    
    # smooth with a hanning window
    window_size = int(fs / smoothing_hz)
    env_smoothed = np.convolve(env, np.hanning(window_size), mode='same') / np.sum(np.hanning(window_size))
    
    # set undeterminable at beginning and end NA's to 0
    env_smoothed = np.nan_to_num(env_smoothed)
    
    # resample settings at desired sampling rate
    time_original = np.linspace(0, len(env_smoothed) / fs, len(env_smoothed))

    # create array for resampled data
    f = interp1d(time_original, env_smoothed, kind='linear', fill_value='extrapolate')
    time_resampled = np.linspace(0, len(env_smoothed) / fs, int(len(env_smoothed) * resampled_hz / fs))
    
    # resample apply
    downsampled = f(time_resampled)
    
    return downsampled

```

## Pitch
```{python}

import parselmouth
import pandas as pd

def extract_sound_features(locationsound):
    # read the sound file into Python
    snd = parselmouth.Sound(locationsound)

    #intensity = snd.to_intensity()
    #spectogram = snd.to_spectrogram()
    pitch = snd.to_pitch()
    f0_values = pitch.selected_array['frequency']

    return snd, f0_values

```


# BODY MOVEMENT
# POSTURAL SWAY
# MERGING