# get current working directory
curfolder   <- dirname(getwd())
project_folder <- paste0(curfolder, "/TS_processing/")
audio_orig <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/"
processed_folder <- paste0(project_folder, "/TS_acoustics/")
# sanity check
#print(curfolder)
# packages
library(soundgen) # sound analysis
library(readr)    # data wrangling
library(tidyr)
library(dplyr)
library(umap) # umap
library(ggplot2) # plotting
library(viridis) # plotting
library(ggforce) #
library(plotly) # interactive plots
# List all .wav files in the folder and its subdirectories
wav_files <- list.files(audio_orig,
pattern = "\\.wav$",
full.names = TRUE,
recursive = TRUE)
# This function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
features <- analyze_result$detailed
# Add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
features <- analyze(file, samplingRate = 48000, windowLength = 100, pitchCeiling = 1000)
# Extract features
features_df <- extract_features(file, features)
# Extract the base filename without the extension and path
base_filename <- tools::file_path_sans_ext(basename(file))
# Create the full path for the output CSV file, with 'soundgen_' prefix
csv_filename <- paste0(processed_folder, "/soundgen_", base_filename, ".csv")
# Write the features to a CSV file
write.csv(features_df, csv_filename, row.names = FALSE)
print(paste("Saved features to:", csv_filename))
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# This function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
features <- analyze_result$detailed
# Add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
features <- analyze(file, samplingRate = 48000, windowLength = 100, pitchCeiling = 1000)
# Extract features
features_df <- extract_features(file, features)
# Extract the base filename without the extension and path
base_filename <- tools::file_path_sans_ext(basename(file))
# Remove the specific substring from the base filename
cleaned_filename <- gsub("Mic_nominal_srate48000_|pr_|trial_", "", base_filename)
# Create the full path for the output CSV file, with 'soundgen_' prefix
csv_filename <- paste0(processed_folder, "/soundgen_", cleaned_filename, ".csv")
# Write the features to a CSV file
write.csv(features_df, csv_filename, row.names = FALSE)
print(paste("Saved features to:", csv_filename))
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# List all .wav files in the folder and its subdirectories
wav_files <- list.files(audio_orig,
pattern = "\\.wav$",
full.names = TRUE,
recursive = TRUE)
register_path <- file.path(project_folder, 'SpeakerRegister.txt')
# List all .wav files in the folder and its subdirectories
wav_files <- list.files(audio_orig,
pattern = "\\.wav$",
full.names = TRUE,
recursive = TRUE)
register_path <- file.path(project_folder, 'SpeakerRegister.txt')
register_df <- read.table(file_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# List all .wav files in the folder and its subdirectories
wav_files <- list.files(audio_orig,
pattern = "\\.wav$",
full.names = TRUE,
recursive = TRUE)
register_path <- file.path(project_folder, 'SpeakerRegister.txt')
register_df <- read.table(register_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
register_df
register_df
mean_key <- mean(register_df$key, na.rm=TRUE)
sd_key <- sd(register_df$key, na.rm=TRUE)
# get min and max f0
max_f0 <- mean_key + 2*sd_key
min_f0 <- mean_key - 2*sd_key
max_f0
register_df
register_df
# Remove rows where 'key' is '--undefined--'
register_df <- register_df[register_df$key != '--undefined--', ]
mean_key <- mean(register_df$key, na.rm=TRUE)
sd_key <- sd(register_df$key, na.rm=TRUE)
# get min and max f0
max_f0 <- mean_key + 2*sd_key
min_f0 <- mean_key - 2*sd_key
register_df
max_f0
register_df
# Remove rows where 'key' is '--undefined--'
register_df <- register_df[register_df$key != '--undefined--', ]
# Convert the 'key' column to numeric
df$key <- as.numeric(df$key)
register_df
# Remove rows where 'key' is '--undefined--'
register_df <- register_df[register_df$key != '--undefined--', ]
# Convert the 'key' column to numeric
register_df$key <- as.numeric(register_df$key)
mean_key <- mean(register_df$key, na.rm=TRUE)
sd_key <- sd(register_df$key, na.rm=TRUE)
# get min and max f0
max_f0 <- mean_key + 2*sd_key
min_f0 <- mean_key - 2*sd_key
max_f0
min_f0
sd_key
mean_key
register_df
# Remove rows where 'key' is '--undefined--'
register_df <- register_df[register_df$key != '--undefined--', ]
# Convert the 'key' column to numeric
register_df$key <- as.numeric(register_df$key)
mean_key <- mean(register_df$key, na.rm=TRUE)
sd_key <- sd(register_df$key, na.rm=TRUE)
# get min and max f0
max_f0 <- mean_key + 2*sd_key #650
# this is an empty data frame where we store the features
all_features_df <- data.frame()
# this function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
#summary_features <- analyze_result$summary
features <- analyze_result$detailed
# add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
# audio <- readWave(file)
features <- analyze(file, samplingRate = 48000, windowLength = 100, pitchCeiling=max_f0)
# Extract features
features_df <- extract_features(file, features)
# Append the summary features for this file to the main data frame
all_features_df <- rbind(all_features_df, features_df)
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# Print the final features data frame
print(all_features_df)
# Define the file path
file_path <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/0_1_trial_2_Mic_nominal_srate48000_p0_bitter_geluiden_corrected.wav"
# Filter the data frame for the specific file
file_data <- all_features_df[all_features_df$File == file_path, ]
# Check if "flux" column exists and extract it
if ("flux" %in% colnames(file_data)) {
flux_data <- file_data$flux
f1_data <- file_data$f1_freq
f2_data <- file_data$f2_freq
f3_data <- file_data$f3_freq
f0 <- file_data$pitch
time <- file_data$time
} else {
stop("The 'flux' column is not available in the features data frame.")
}
# Plotting the flux data using base R
plot(flux_data, type = "l", main = "Flux over Time", xlab = "Time", ylab = "Flux")
# Alternatively, using ggplot2 for plotting
library(ggplot2)
plot_df <- data.frame(Time = time, Flux = f0)
ggplot(plot_df, aes(x = Time, y = f0)) +
geom_line() +
theme_minimal()
# Define the file path
file_path <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/0_1_trial_2_Mic_nominal_srate48000_p0_bitter_geluiden_corrected.wav"
# Filter the data frame for the specific file
file_data <- all_features_df[all_features_df$File == file_path, ]
# Check if "flux" column exists and extract it
if ("flux" %in% colnames(file_data)) {
flux_data <- file_data$flux
f1_data <- file_data$f1_freq
f2_data <- file_data$f2_freq
f3_data <- file_data$f3_freq
f0 <- file_data$pitch
time <- file_data$time
} else {
stop("The 'flux' column is not available in the features data frame.")
}
# Plotting the flux data using base R
plot(flux_data, type = "l", main = "Flux over Time", xlab = "Time", ylab = "Flux")
# Alternatively, using ggplot2 for plotting
library(ggplot2)
plot_df <- data.frame(Time = time, Flux = f1_data)
ggplot(plot_df, aes(x = Time, y = f1_data)) +
geom_line() +
theme_minimal()
# Define the file path
file_path <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/0_1_trial_2_Mic_nominal_srate48000_p0_bitter_geluiden_corrected.wav"
# Filter the data frame for the specific file
file_data <- all_features_df[all_features_df$File == file_path, ]
# Check if "flux" column exists and extract it
if ("flux" %in% colnames(file_data)) {
flux_data <- file_data$flux
f1_data <- file_data$f1_freq
f2_data <- file_data$f2_freq
f3_data <- file_data$f3_freq
f0 <- file_data$pitch
time <- file_data$time
} else {
stop("The 'flux' column is not available in the features data frame.")
}
# Plotting the flux data using base R
plot(flux_data, type = "l", main = "Flux over Time", xlab = "Time", ylab = "Flux")
# Alternatively, using ggplot2 for plotting
library(ggplot2)
plot_df <- data.frame(Time = time, Flux = f2_data)
ggplot(plot_df, aes(x = Time, y = f2_data)) +
geom_line() +
theme_minimal()
# Define the file path
file_path <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/0_1_trial_2_Mic_nominal_srate48000_p0_bitter_geluiden_corrected.wav"
# Filter the data frame for the specific file
file_data <- all_features_df[all_features_df$File == file_path, ]
# Check if "flux" column exists and extract it
if ("flux" %in% colnames(file_data)) {
flux_data <- file_data$flux
f1_data <- file_data$f1_freq
f2_data <- file_data$f2_freq
f3_data <- file_data$f3_freq
f0 <- file_data$pitch
time <- file_data$time
} else {
stop("The 'flux' column is not available in the features data frame.")
}
# Plotting the flux data using base R
plot(flux_data, type = "l", main = "Flux over Time", xlab = "Time", ylab = "Flux")
# Alternatively, using ggplot2 for plotting
library(ggplot2)
plot_df <- data.frame(Time = time, Flux = f3_freq)
# Define the file path
file_path <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/0_1_trial_2_Mic_nominal_srate48000_p0_bitter_geluiden_corrected.wav"
# Filter the data frame for the specific file
file_data <- all_features_df[all_features_df$File == file_path, ]
# Check if "flux" column exists and extract it
if ("flux" %in% colnames(file_data)) {
flux_data <- file_data$flux
f1_data <- file_data$f1_freq
f2_data <- file_data$f2_freq
f3_data <- file_data$f3_freq
f0 <- file_data$pitch
time <- file_data$time
} else {
stop("The 'flux' column is not available in the features data frame.")
}
# Plotting the flux data using base R
plot(flux_data, type = "l", main = "Flux over Time", xlab = "Time", ylab = "Flux")
# Alternatively, using ggplot2 for plotting
library(ggplot2)
plot_df <- data.frame(Time = time, Flux = f3_data)
ggplot(plot_df, aes(x = Time, y = f3_data)) +
geom_line() +
theme_minimal()
# This function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
features <- analyze_result$detailed
# Add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
features <- analyze(file, samplingRate = 48000, windowLength = 100, pitchCeiling = max_f0)
# Extract features
features_df <- extract_features(file, features)
# Extract the base filename without the extension and path
base_filename <- tools::file_path_sans_ext(basename(file))
# Remove the specific substring from the base filename
cleaned_filename <- gsub("Mic_nominal_srate48000_|pr_|trial_", "", base_filename)
# Create the full path for the output CSV file, with 'soundgen_' prefix
csv_filename <- paste0(processed_folder, "/soundgen_", cleaned_filename, ".csv")
# Write the features to a CSV file
write.csv(features_df, csv_filename, row.names = FALSE)
print(paste("Saved features to:", csv_filename))
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# get current working directory
curfolder   <- dirname(getwd())
project_folder <- paste0(curfolder, "/TS_processing/")
#audio_orig <- "E:/charade_experiment_WORKSPACE/xdf_procedure/data/Data_processed/Data_trials/Audio_48/"
audio_orig <- paste0(project_folder, "/Audio/")
processed_folder <- paste0(project_folder, "/TS_acoustics/")
# sanity check
#print(curfolder)
# packages
library(soundgen) # sound analysis
library(readr)    # data wrangling
library(tidyr)
library(dplyr)
library(umap) # umap
library(ggplot2) # plotting
library(viridis) # plotting
library(ggforce) #
library(plotly) # interactive plots
# List all .wav files in the folder and its subdirectories
wav_files <- list.files(audio_orig,
pattern = "\\.wav$",
full.names = TRUE,
recursive = TRUE)
register_path <- file.path(project_folder, 'SpeakerRegister.txt')
register_df <- read.table(register_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# this is an empty data frame where we store the features
all_features_df <- data.frame()
# this function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
#summary_features <- analyze_result$summary
features <- analyze_result$detailed
# add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
# audio <- readWave(file)
features <- analyze(file, samplingRate = 48000, windowLength = 20, pitchCeiling=max_f0)
# Extract features
features_df <- extract_features(file, features)
# Append the summary features for this file to the main data frame
all_features_df <- rbind(all_features_df, features_df)
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# Print the final features data frame
print(all_features_df)
register_df
# Remove rows where 'key' is '--undefined--'
register_df <- register_df[register_df$key != '--undefined--', ]
# Convert the 'key' column to numeric
register_df$key <- as.numeric(register_df$key)
mean_key <- mean(register_df$key, na.rm=TRUE)
sd_key <- sd(register_df$key, na.rm=TRUE)
# get min and max f0
max_f0 <- mean_key + 2*sd_key #650
# this is an empty data frame where we store the features
all_features_df <- data.frame()
# this function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
#summary_features <- analyze_result$summary
features <- analyze_result$detailed
# add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
# audio <- readWave(file)
features <- analyze(file, samplingRate = 48000, windowLength = 20, pitchCeiling=max_f0)
# Extract features
features_df <- extract_features(file, features)
# Append the summary features for this file to the main data frame
all_features_df <- rbind(all_features_df, features_df)
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# this is an empty data frame where we store the features
all_features_df <- data.frame()
# this function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
#summary_features <- analyze_result$summary
features <- analyze_result$detailed
# add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
# audio <- readWave(file)
features <- analyze(file, samplingRate = 48000, windowLength = 20, pitchCeiling=1000)
# Extract features
features_df <- extract_features(file, features)
# Append the summary features for this file to the main data frame
all_features_df <- rbind(all_features_df, features_df)
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# this is an empty data frame where we store the features
all_features_df <- data.frame()
# this function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
#summary_features <- analyze_result$summary
features <- analyze_result$detailed
# add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
# audio <- readWave(file)
features <- analyze(file, windowLength = 20, step=10, pitchCeiling=1000)
# Extract features
features_df <- extract_features(file, features)
# Append the summary features for this file to the main data frame
all_features_df <- rbind(all_features_df, features_df)
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
# Print the final features data frame
print(all_features_df)
# This function extracts summary features from the analyze output
extract_features <- function(file, analyze_result) {
features <- analyze_result$detailed
# Add the filename as the first column
df_features <- cbind(File = file, features)
return(df_features)
}
# Loop over the .wav files in the directory and extract summary features
for (file in wav_files) {
print(paste("Analyzing file:", file))
tryCatch({
# Read and analyze the audio file
features <- analyze(file, windowLength = 20, step=10, pitchCeiling = 1000)
# Extract features
features_df <- extract_features(file, features)
# Extract the base filename without the extension and path
base_filename <- tools::file_path_sans_ext(basename(file))
# Remove the specific substring from the base filename
cleaned_filename <- gsub("Mic_nominal_srate48000_|pr_|trial_", "", base_filename)
# Create the full path for the output CSV file, with 'soundgen_' prefix
csv_filename <- paste0(processed_folder, "/soundgen_", cleaned_filename, ".csv")
# Write the features to a CSV file
write.csv(features_df, csv_filename, row.names = FALSE)
print(paste("Saved features to:", csv_filename))
}, warning = function(w) {
print(paste("Warning while processing file:", file))
print(w)
}, error = function(e) {
print(paste("Error while processing file:", file))
print(e)
})
}
