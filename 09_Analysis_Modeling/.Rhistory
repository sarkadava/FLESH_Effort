)
gam <-
brm(data = test2,
family = gaussian,
Effort_Change_Ratio ~ 1 + s(PrevAn_z),
prior = c(prior(normal(100, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(student_t(3, 0, 5.9), class = sds),
prior(exponential(1), class = sigma)),
iter = 4000, warmup = 2000, chains = 4, cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
print(gam)
fitted(gam) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(b4.10)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = "gam using s(PrevAn)",
y = "Effort Change Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
fitted(gam) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = "gam using s(PrevAn)",
y = "Effort Change Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
gam_s <-
brm(data = test2,
family = gaussian,
Effort_Change_Ratio ~ 1 + s(PrevAn, bs = "bs", k = 19),
prior = c(prior(normal(100, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(student_t(3, 0, 5.9), class = sds),
prior(exponential(1), class = sigma)),
iter = 2000, warmup = 1000, chains = 4, cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
gam_s <-
brm(data = test2,
family = gaussian,
Effort_Change_Ratio ~ 1 + s(PrevAn, bs = "bs", k = 19),
prior = c(prior(normal(100, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(student_t(3, 0, 5.9), class = sds),
prior(exponential(1), class = sigma)),
iter = 4000, warmup = 2000, chains = 4, cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
print(gam_s)
fitted(gam_s) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam_s)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = 'gam_s using s(PrevAn, bs = "bs")',
y = "Effort Chnage Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
plot(conditional_effects(gam_s), points = TRUE)
pp_check(gam_s, type = "dens_overlay")
# this looks so much better
pp_check(gam_s, type = "error_scatter_avg")
gam_s2 <-
brm(
data = test2,
family = gaussian,
Effort_Change_Ratio ~ 1 +
s(PrevAn_z, bs = "bs", k = 19) +  # Smooth for Previous Answer similarity
CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  # Fixed effects
(1 | Participant) + (1 | Concept),  # Random effects
prior = c(
prior(normal(100, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(student_t(3, 0, 5.9), class = sds),
prior(exponential(1), class = sigma)
),
iter = 4000, warmup = 2000, chains = 4, cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
print(gam_s2)
plot(conditional_effects(gam_s2), points = TRUE)
pp_check(gam_s2, type = "dens_overlay")
# this looks so much better
pp_check(gam_s2, type = "error_scatter_avg")
fitted(gam_s2) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn_z, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam_s2)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = 'gam_s using s(PrevAn, bs = "bs")',
y = "Effort Chnage Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
View(test2)
View(test2)
fitted(gam_s2) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn_z, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn_z, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam_s2)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = 'gam_s using s(PrevAn, bs = "bs")',
y = "Effort Chnage Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
priors_gam_s3 <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb = 0),
set_prior("normal(0, 0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0, 0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0, 0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0, 0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0, 0.25)", class = "b", coef = "Big5"),
set_prior("normal(0, 0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0, 0.25)", class = "b", coef = "Expressibility_z")
)
gam_s3 <-
brm(
Eff ~ 1 +
s(PrevAn_z, bs = "bs", k = 19) +  # Nonlinear effect for Previous Answer similarity
CommAtt + Modality + Big5 + Familiarity + Expressibility_z +
(1 + CommAtt | Participant) +  # Random slopes and intercepts for Participant
(1 + CommAtt | Concept) +      # Random slopes and intercepts for Concept
(1 | TrialNumber_c),           # Random intercept for Trial Number
data = test2,
family = lognormal(),
prior = priors_gam_s3,
iter = 4000,
warmup = 2000,
chains = 4,
cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
priors_gam_s3 <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb = 0),
set_prior("normal(0, 0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0, 0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0, 0.25)", class = "b", coef = "Big5"),
set_prior("normal(0, 0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0, 0.25)", class = "b", coef = "Expressibility_z")
)
gam_s3 <-
brm(
Eff ~ 1 +
s(PrevAn_z, bs = "bs", k = 19) +  # Nonlinear effect for Previous Answer similarity
CommAtt + Modality + Big5 + Familiarity + Expressibility_z +
(1 + CommAtt | Participant) +  # Random slopes and intercepts for Participant
(1 + CommAtt | Concept) +      # Random slopes and intercepts for Concept
(1 | TrialNumber_c),           # Random intercept for Trial Number
data = test2,
family = lognormal(),
prior = priors_gam_s3,
iter = 4000,
warmup = 2000,
chains = 4,
cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
# Add model diagnostic criteria
gam_s3 <- add_criterion(gam_s3, criterion = c("loo", "waic"))
# Save the model
saveRDS(gam_s3, here("09_Analysis_Modeling", "models", "gam_s3.rds"))
beep(5)
print(gam_s3)
plot(conditional_effects(gam_s3), points = TRUE)
pp_check(gam_s3, type = "dens_overlay")
pp_check(gam_s3, type = "error_scatter_avg")
fitted(gam_s3) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn_z, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn_z, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam_s3)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = 'gam_s using s(PrevAn, bs = "bs")',
y = "Effort Chnage Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
fitted(gam_s3) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam_s3)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = 'gam_s using s(PrevAn, bs = "bs")',
y = "Effort Chnage Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
plot(conditional_effects(gam_s3), points = TRUE)
priors_eff_prevan_2 <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z")
)
# The rest we will leave default (and check afterwards)
fit_eff_prevan_2 <- brm(Eff ~ 1 + PrevAn_z + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data_2,
family = lognormal(),
prior = priors_eff_prevan_2,
iter = 4000,
cores = 4)
# Set seed for reproducibility
set.seed(0209)
# Define participants, total unique concepts, and modalities
n_participants <- 120
n_total_concepts <- 21  # Total unique concepts
n_concepts_per_participant <- 21  # Each participant works with 21 concepts
n_modalities <- 3  # gesture, vocal, combined
# Generate participant IDs
participants <- 1:n_participants
# Simulate Big5 personality traits (standardized between 0 and 1) and Familiarity (between 0 and 1) for participants
Big5 <- runif(n_participants, min = 0, max = 1)  # Continuous values between 0 and 1
Familiarity <- runif(n_participants, min = 0, max = 1)  # Continuous values between 0 and 1
# Create a matrix to hold expressibility values for each concept in each modality
expressibility_matrix <- matrix(runif(n_total_concepts * n_modalities, min = 0, max = 1), nrow = n_total_concepts, ncol = n_modalities)
# Randomly sample 21 unique concepts for each participant
final_data_2 <- data.frame()
# Define a function to assign CommAtt and Eff for a single participant
simulate_participant <- function(participant_id) {
# Randomly sample 21 unique concepts from the total pool of 84
selected_concepts <- sample(1:n_total_concepts, n_concepts_per_participant)
participant_data <- data.frame()
trial_number <- 1  # Initialize trial number
prev_answer_similarity <- NA  # Initialize PrevAn for the first trial
for (concept_id in selected_concepts) {
# Randomly determine the modality for the concept
modality <- sample(c("gesture", "vocal", "combined"), 1)
# Calculate expressibility based on modality
expressibility_score <- ifelse(modality == "vocal", expressibility_matrix[concept_id, 1] * 0.6,
ifelse(modality == "gesture", expressibility_matrix[concept_id, 2],
expressibility_matrix[concept_id, 3] * 1.5))
# Determine Communicative Attempts based solely on expressibility, familiarity, and Big5
base_prob <- c(0.33, 0.33, 0.33)  # Equal chance for 1, 2, or 3 attempts
# Modify probabilities based on familiarity, Big5, and expressibility
adjusted_prob <- base_prob * c(1 - Familiarity[participant_id],
1 - Familiarity[participant_id],
1 - Familiarity[participant_id]) *
c(1 - Big5[participant_id],
1 - Big5[participant_id],
1 - Big5[participant_id]) *
c(1 - expressibility_score,
1 - expressibility_score,
1 - expressibility_score)
# Normalize the adjusted probabilities
adjusted_prob <- adjusted_prob / sum(adjusted_prob)
# Sample the number of communicative attempts based on adjusted probabilities
n_attempts <- sample(1:3, 1, prob = adjusted_prob)
# Loop through the number of attempts and increment CommAtt correctly
for (attempt in 1:n_attempts) {
# Calculate Eff for the first attempt
if (attempt == 1) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
# Adjust Eff based on modality
if (modality == "combined") {
Eff <- Eff * 0.7  # Slight moderation for combined modality
}
# Set PrevAn to NA for the first attempt
prev_answer_similarity <- NA
}
# Adjust Eff for subsequent attempts
if (attempt == 2) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
Eff <- Eff * 1.50  # Multiply effort by 1.50 for the second attempt
} else if (attempt == 3) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
Eff <- Eff * 0.70  # Multiply effort by 0.70 for the third attempt
}
# Adjust Eff based on PrevAn (previous answer similarity)
if (!is.na(prev_answer_similarity)) {
Eff <- Eff * (1 + (1 - prev_answer_similarity) * 0.5)  # 0.5 is the coefficient for the modulation effect
}
# Create row for each attempt
participant_data <- rbind(participant_data, data.frame(
Participant = participant_id,
Concept = concept_id,
Modality = modality,
Big5 = Big5[participant_id],
Familiarity = Familiarity[participant_id],
Expressibility = expressibility_score,
CommAtt = attempt,  # Correctly set the attempt number
Eff = Eff,
TrialNumber = trial_number,  # Set trial number for this attempt
PrevAn = prev_answer_similarity  # Add PrevAn value for the current attempt
))
# Increment the trial number after each attempt
trial_number <- trial_number + 1
# Update PrevAn similarity for the next attempt
prev_answer_similarity <- runif(1, min = 0, max = 1)  # Simulate similarity for the next attempt
}
}
return(participant_data)
}
# Simulate data for all participants
for (i in participants) {
final_data_2 <- rbind(final_data_2, simulate_participant(i))
}
# Preview the first few rows of the final data
head(final_data_2)
hist(final_data_2$Eff)
final_data_2 <- final_data_2 %>%
group_by(Participant, Concept) %>%
mutate(
Effort_1 = Eff[CommAtt == 1][1],  # Effort for attempt 1
Effort_2 = Eff[CommAtt == 2][1],  # Effort for attempt 2
Effort_3 = Eff[CommAtt == 3][1],  # Effort for attempt 3
Effort_Change_Ratio_1_to_2 = case_when(
CommAtt == 2 & !is.na(Effort_1) ~ Eff / Effort_1,
TRUE ~ NA_real_
),
Effort_Change_Ratio_2_to_3 = case_when(
CommAtt == 3 & !is.na(Effort_2) ~ Eff / Effort_2,
TRUE ~ NA_real_
)
) %>%
select(-Effort_1, -Effort_2, -Effort_3) %>%  # Clean up intermediate columns
ungroup()
# View the result
head(final_data_2)
final_data_2 <- final_data_2 %>%
mutate(
Effort_Change_Ratio = coalesce(Effort_Change_Ratio_1_to_2, Effort_Change_Ratio_2_to_3)
) %>%
select(-Effort_Change_Ratio_1_to_2, -Effort_Change_Ratio_2_to_3)
# View the result
head(final_data_2)
filtered_data$CommAtt <- as.factor(filtered_data$CommAtt)
filtered_data$Modality <- as.factor(filtered_data$Modality)
filtered_data$Participant <- as.factor(filtered_data$Participant)
filtered_data$Concept <- as.factor(filtered_data$Concept)
filtered_data$TrialNumber <- as.numeric(filtered_data$TrialNumber)  # Ensure TrialNumber is numeric
contrasts(filtered_data$CommAtt) <- MASS::contr.sdif(2)
contrasts(filtered_data$Modality) <- contr.sum(3)/2
filtered_data$TrialNumber_c <- filtered_data$TrialNumber - median(range(filtered_data$TrialNumber))
range(filtered_data$TrialNumber_c)
range(filtered_data$TrialNumber)
filtered_data$Familiarity <- filtered_data$Familiarity - median(range(filtered_data$Familiarity))
filtered_data$Big5 <- filtered_data$Big5 - median(range(filtered_data$Big5))
filtered_data <-
filtered_data |>
group_by(Modality) |>
mutate(Expressibility_z = (Expressibility - mean(Expressibility))/ sd(filtered_data$Expressibility, na.rm = T)) |>
ungroup()
filtered_data <-
filtered_data |>
#group_by(Modality) |>
mutate(PrevAn_z = (PrevAn - mean(PrevAn))/ sd(filtered_data$PrevAn, na.rm = T)) |>
ungroup()
priors_eff_prevan_2 <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z")
)
# The rest we will leave default (and check afterwards)
fit_eff_prevan_2 <- brm(Effort_Change_Ratio ~ 1 + PrevAn_z + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data_2,
family = lognormal(),
prior = priors_eff_prevan_2,
iter = 4000,
cores = 4)
View(final_effort_change)
View(final_effort_change)
View(final_data_2)
View(final_data_2)
# Filter out CommAtt == 1
filtered_data <- final_data_2[final_data_2$CommAtt != 1, ]
# Scatter plot with regression line
library(ggplot2)
ggplot(filtered_data, aes(x = PrevAn, y = Effort_Change_Ratio)) +
geom_point(alpha = 0.6, color = "blue") +  # Scatter points
geom_smooth(method = "lm", color = "red", se = FALSE) +  # Regression line
labs(x = "Previous Answer Similarity (PrevAn)",
y = "Effort (Eff)",
title = "Relationship between Effort and Previous Answer Similarity") +
theme_minimal()
filtered_data$CommAtt <- as.factor(filtered_data$CommAtt)
filtered_data$Modality <- as.factor(filtered_data$Modality)
filtered_data$Participant <- as.factor(filtered_data$Participant)
filtered_data$Concept <- as.factor(filtered_data$Concept)
filtered_data$TrialNumber <- as.numeric(filtered_data$TrialNumber)  # Ensure TrialNumber is numeric
contrasts(filtered_data$CommAtt) <- MASS::contr.sdif(2)
contrasts(filtered_data$Modality) <- contr.sum(3)/2
filtered_data$TrialNumber_c <- filtered_data$TrialNumber - median(range(filtered_data$TrialNumber))
range(filtered_data$TrialNumber_c)
range(filtered_data$TrialNumber)
filtered_data$Familiarity <- filtered_data$Familiarity - median(range(filtered_data$Familiarity))
filtered_data$Big5 <- filtered_data$Big5 - median(range(filtered_data$Big5))
filtered_data <-
filtered_data |>
group_by(Modality) |>
mutate(Expressibility_z = (Expressibility - mean(Expressibility))/ sd(filtered_data$Expressibility, na.rm = T)) |>
ungroup()
filtered_data <-
filtered_data |>
#group_by(Modality) |>
mutate(PrevAn_z = (PrevAn - mean(PrevAn))/ sd(filtered_data$PrevAn, na.rm = T)) |>
ungroup()
priors_eff_prevan_2 <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z")
)
# The rest we will leave default (and check afterwards)
fit_eff_prevan_2 <- brm(Effort_Change_Ratio ~ 1 + PrevAn_z + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = filtered_data,
family = lognormal(),
prior = priors_eff_prevan_2,
iter = 4000,
cores = 4)
# we will immediatelly add the diagnostic criteria
fit_eff_prevan_2 <- add_criterion(fit_eff_prevan_2, criterion = c("loo", "waic"))  #Warnung: 12 (0.2%) p_waic estimates greater than 0.4. We recommend trying loo instead.
# and save it
saveRDS(fit_eff_prevan_2, here("09_Analysis_Modeling", "models", "fit_eff_prevan_2.rds"))
beep(5)
# summary
summary(fit_eff_prevan_2)
plot(fit_eff_prevan_2)
plot(conditional_effects(fit_eff_prevan_2), points = TRUE)
pp_check(fit_eff_prevan_2, type = "dens_overlay", ndraws = 300)
pp_check(fit_eff_prevan_2, type = "error_scatter_avg")
priors_gam_s3 <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb = 0),
set_prior("normal(0, 0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0, 0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0, 0.25)", class = "b", coef = "Big5"),
set_prior("normal(0, 0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0, 0.25)", class = "b", coef = "Expressibility_z")
)
gam_s3 <-
brm(
Effort_Change_Ratio ~ 1 +
s(PrevAn_z, bs = "bs", k = 19) +  # Nonlinear effect for Previous Answer similarity
CommAtt + Modality + Big5 + Familiarity + Expressibility_z +
(1 + CommAtt | Participant) +  # Random slopes and intercepts for Participant
(1 + CommAtt | Concept) +      # Random slopes and intercepts for Concept
(1 | TrialNumber_c),           # Random intercept for Trial Number
data = test2,
family = lognormal(),
prior = priors_gam_s3,
iter = 4000,
warmup = 2000,
chains = 4,
cores = 4,
seed = 4,
control = list(adapt_delta = .99)
)
# Add model diagnostic criteria
gam_s3 <- add_criterion(gam_s3, criterion = c("loo", "waic"))
# Save the model
saveRDS(gam_s3, here("09_Analysis_Modeling", "models", "gam_s3.rds"))
beep(5)
print(gam_s3)
plot(conditional_effects(gam_s3), points = TRUE)
pp_check(gam_s3, type = "dens_overlay")
pp_check(gam_s3, type = "error_scatter_avg")
fitted(gam_s3) %>%
data.frame() %>%
bind_cols(select(test2, PrevAn, Effort_Change_Ratio)) %>%
ggplot(aes(x = PrevAn, y = Effort_Change_Ratio, ymin = Q2.5, ymax = Q97.5)) +
geom_hline(yintercept = fixef(gam_s3)[1, 1], color = "white", linetype = 2) +
geom_point(color = "#ffb7c5", alpha = 1/2) +
geom_ribbon(fill = "white", alpha = 2/3) +
labs(subtitle = 'gam_s using s(PrevAn, bs = "bs")',
y = "Effort Chnage Ratio") +
theme_bw() +
theme(panel.background = element_rect(fill = "#4f455c"),
panel.grid = element_blank())
prior_summary(fit_eff_prevan_2)
