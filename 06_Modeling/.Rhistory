geom_density(fill = "black", linewidth = 0) +
geom_vline(xintercept = 0, color = "grey92") +
geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
geom_text(data = text,
aes(y = y, label = label, angle = angle),
color = "grey92") +
scale_x_continuous(breaks = breaks) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)") +
theme(panel.grid = element_blank())
p4
(p1 + xlab("mu") | p2 + xlab("sigma")) / (p3 | p4)
# simulate
set.seed(4)
sim <-
tibble(sample_mu    = rnorm(1000, mean = 2.5, sd = 1),
sample_sigma = runif(1000, min = 0, max = 5)) %>%
mutate(height = rnorm(1000, mean = sample_mu, sd = sample_sigma))
# compute the values we'll use to break on our x axis
breaks <-
c(mean(sim$height) - 3 * sd(sim$height), 0, mean(sim$height), mean(sim$height) + 3 * sd(sim$height)) %>%
round(digits = 0)
# this is just for aesthetics
text <-
tibble(height = 272 - 25,
y      = .0013,
label  = "tallest man",
angle  = 90)
# plot
p4 <-
sim %>%
ggplot(aes(x = height)) +
geom_density(fill = "black", linewidth = 0) +
geom_vline(xintercept = 0, color = "grey92") +
geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
geom_text(data = text,
aes(y = y, label = label, angle = angle),
color = "grey92") +
scale_x_continuous(breaks = breaks) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)") +
theme(panel.grid = element_blank())
p4
(p1 + xlab("mu") | p2 + xlab("sigma")) / (p3 | p4)
# simulate
set.seed(4)
sim <-
tibble(sample_mu    = rnorm(1000, mean = 2.5, sd = 1),
sample_sigma = runif(1000, min = 0, max = 5)) %>%
mutate(height = rnorm(1000, mean = sample_mu, sd = sample_sigma))
# compute the values we'll use to break on our x axis
breaks <-
c(mean(sim$height) - 3 * sd(sim$height), 0, mean(sim$height), mean(sim$height) + 3 * sd(sim$height)) %>%
round(digits = 0)
# this is just for aesthetics
text <-
tibble(height = 272 - 25,
y      = .0013,
label  = "tallest man",
angle  = 90)
# plot
p4 <-
sim %>%
ggplot(aes(x = height)) +
geom_density(fill = "black", linewidth = 0) +
geom_vline(xintercept = 0, color = "grey92") +
geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
geom_text(data = text,
aes(y = y, label = label, angle = angle),
color = "grey92") +
scale_x_continuous(breaks = breaks) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)") +
theme(panel.grid = element_blank())
p4
#(p1 + xlab("mu") | p2 + xlab("sigma")) / (p3 | p4)
# simulate
set.seed(4)
sim <-
tibble(sample_mu    = rnorm(1000, mean = 2.5, sd = 1),
sample_sigma = runif(1000, min = 0, max = 2)) %>%
mutate(height = rnorm(1000, mean = sample_mu, sd = sample_sigma))
# compute the values we'll use to break on our x axis
breaks <-
c(mean(sim$height) - 3 * sd(sim$height), 0, mean(sim$height), mean(sim$height) + 3 * sd(sim$height)) %>%
round(digits = 0)
# this is just for aesthetics
text <-
tibble(height = 272 - 25,
y      = .0013,
label  = "tallest man",
angle  = 90)
# plot
p4 <-
sim %>%
ggplot(aes(x = height)) +
geom_density(fill = "black", linewidth = 0) +
geom_vline(xintercept = 0, color = "grey92") +
geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
geom_text(data = text,
aes(y = y, label = label, angle = angle),
color = "grey92") +
scale_x_continuous(breaks = breaks) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)") +
theme(panel.grid = element_blank())
p4
#(p1 + xlab("mu") | p2 + xlab("sigma")) / (p3 | p4)
# simulate
set.seed(4)
sim <-
tibble(sample_mu    = rnorm(1000, mean = 2.5, sd = 1),
sample_sigma = runif(1000, min = 0, max = 2)) %>%
mutate(height = rnorm(10, mean = sample_mu, sd = sample_sigma))
# simulate
set.seed(4)
sim <-
tibble(sample_mu    = rnorm(1000, mean = 2.5, sd = 1),
sample_sigma = runif(1000, min = 0, max = 2)) %>%
mutate(height = rnorm(1, mean = sample_mu, sd = sample_sigma))
# compute the values we'll use to break on our x axis
breaks <-
c(mean(sim$height) - 3 * sd(sim$height), 0, mean(sim$height), mean(sim$height) + 3 * sd(sim$height)) %>%
round(digits = 0)
# this is just for aesthetics
text <-
tibble(height = 272 - 25,
y      = .0013,
label  = "tallest man",
angle  = 90)
# plot
p4 <-
sim %>%
ggplot(aes(x = height)) +
geom_density(fill = "black", linewidth = 0) +
geom_vline(xintercept = 0, color = "grey92") +
geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
geom_text(data = text,
aes(y = y, label = label, angle = angle),
color = "grey92") +
scale_x_continuous(breaks = breaks) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)") +
theme(panel.grid = element_blank())
p4
#(p1 + xlab("mu") | p2 + xlab("sigma")) / (p3 | p4)
# simulate
set.seed(4)
sim <-
tibble(sample_mu    = rnorm(1000, mean = 2.5, sd = 1),
sample_sigma = runif(1000, min = 0, max = 2)) %>%
mutate(height = rnorm(1000, mean = sample_mu, sd = sample_sigma))
# compute the values we'll use to break on our x axis
breaks <-
c(mean(sim$height) - 3 * sd(sim$height), 0, mean(sim$height), mean(sim$height) + 3 * sd(sim$height)) %>%
round(digits = 0)
# this is just for aesthetics
text <-
tibble(height = 272 - 25,
y      = .0013,
label  = "tallest man",
angle  = 90)
# plot
p4 <-
sim %>%
ggplot(aes(x = height)) +
geom_density(fill = "black", linewidth = 0) +
geom_vline(xintercept = 0, color = "grey92") +
geom_vline(xintercept = 272, color = "grey92", linetype = 3) +
geom_text(data = text,
aes(y = y, label = label, angle = angle),
color = "grey92") +
scale_x_continuous(breaks = breaks) +
scale_y_continuous(NULL, breaks = NULL) +
ggtitle("height ~ dnorm(mu, sigma)\nmu ~ dnorm(178, 100)") +
theme(panel.grid = element_blank())
p4
#(p1 + xlab("mu") | p2 + xlab("sigma")) / (p3 | p4)
p1 <-
tibble(x = seq(from = 100, to = 250, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 2.5, sd = 1))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 100, to = 250, by = 75)) +
labs(title = "mu ~ dnorm(178, 20)",
y = "density")
p1
p1 <-
tibble(x = seq(from = 100, to = 250, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 2.5, sd = 1))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = 75)) +
labs(title = "mu ~ dnorm(178, 20)",
y = "density")
p1
p1 <-
tibble(x = seq(from = 100, to = 250, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 2.5, sd = 1))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = .1)) +
labs(title = "mu ~ dnorm(178, 20)",
y = "density")
p1
p1 <-
tibble(x = seq(from = 0, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 2.5, sd = 1))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = .1)) +
labs(title = "mu ~ dnorm(178, 20)",
y = "density")
p1
p1 <-
tibble(x = seq(from = 0, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 2.5, sd = 1))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = .1)) +
labs(title = "mu ~ dnorm(2.5, 1)",
y = "density")
p1
p2 <-
tibble(x = seq(from = -5, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 0, sd = 2))) +
geom_line() +
scale_x_continuous(breaks = seq(from = -5, to = 5, by = .5)) +
labs(title = "mu ~ dnorm(2.5, 1)",
y = "density")
p2
p2 <-
tibble(x = seq(from = -5, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 0, sd = 2))) +
geom_line() +
scale_x_continuous(breaks = seq(from = -5, to = 5, by = .5)) +
labs(title = "mu ~ dnorm(0, 2)",
y = "density")
p2
p2 <-
tibble(x = seq(from = -5, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 0, sd = 2))) +
geom_line() +
scale_x_continuous(breaks = seq(from = -5, to = 5, by = .5)) +
labs(title = "Beta ~ dnorm(0, 2)",
y = "density")
p2
p2 <-
tibble(x = seq(from = -5, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dnorm(x, mean = 0, sd = 1.5))) +
geom_line() +
scale_x_continuous(breaks = seq(from = -4, to = 4, by = .5)) +
labs(title = "Beta ~ dnorm(0, 2)",
y = "density")
p2
p3 <-
tibble(x = seq(from = -5, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dunif(x, min = 0, max = 5))) +
geom_line() +
scale_x_continuous(breaks = seq(from = -4, to = 4, by = .5)) +
labs(title = "Beta ~ dnorm(0, 2)",
y = "density")
p3
p3 <-
tibble(x = seq(from = -5, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dunif(x, min = 0, max = 5))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = .5)) +
labs(title = "Beta ~ dnorm(0, 2)",
y = "density")
p3
p3 <-
tibble(x = seq(from = 0, to = 5, by = .1)) %>%
ggplot(aes(x = x, y = dunif(x, min = 0, max = 5))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = .5)) +
labs(title = "Beta ~ dnorm(0, 2)",
y = "density")
p3
p3 <-
tibble(x = seq(from = -1, to = 6, by = .1)) %>%
ggplot(aes(x = x, y = dunif(x, min = 0, max = 5))) +
geom_line() +
scale_x_continuous(breaks = seq(from = 0, to = 5, by = .5)) +
labs(title = "Beta ~ dnorm(0, 2)",
y = "density")
p3
fit_eff5 <- brm(Eff ~ 1 + CommAtt + Modality + (1 | Participant) + (1 | Concept) + (1 | Familiarity) + (1 | Big5) + (1 | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
cores = 4)
# Chunk 1
library(here)
library(dagitty) # for dag
library(dplyr) # for data-wrangling
library(lme4)  # for linear mixed-effects models
library(tidyr)  # for reshaping data (if needed)
# Chunk 2
dag <- dagitty('dag {
Big5 [adjusted,pos="-0.823,0.657"]
CommAtt [exposure,pos="-1.033,0.028"]
Conc [adjusted,pos="-1.136,-0.848"]
Eff [outcome,pos="-0.102,0.025"]
Expr [adjusted,pos="-0.758,-0.850"]
Fam [adjusted,pos="-0.379,0.663"]
Mod_cat [adjusted,pos="-0.374,-0.850"]
Pcn [adjusted,pos="-0.589,1.214"]
TrNum [adjusted,pos="-1.686,-0.859"]
Big5 -> CommAtt
Big5 -> Eff
CommAtt -> Eff
Conc -> Expr
Expr -> CommAtt
Expr -> Eff
Fam -> CommAtt
Fam -> Eff
Mod_bin -> Eff
Mod_cat -> Expr
Pcn -> Big5
Pcn -> CommAtt
Pcn -> Eff
Pcn -> Fam
TrNum -> CommAtt
TrNum -> Eff
Conc -> CommAtt
Conc -> Eff
}')
plot(dag)
# Chunk 3
# Set seed for reproducibility
set.seed(0209)
# Define participants, total unique concepts, and modalities
n_participants <- 120
n_total_concepts <- 21  # Total unique concepts
n_concepts_per_participant <- 21  # Each participant works with 21 concepts
n_modalities <- 3  # gesture, vocal, combined
# Generate participant IDs
participants <- 1:n_participants
# Simulate Big5 personality traits (standardized between 0 and 1) and Familiarity (between 0 and 1) for participants
Big5 <- runif(n_participants, min = 0, max = 1)  # Continuous values between 0 and 1
Familiarity <- runif(n_participants, min = 0, max = 1)  # Continuous values between 0 and 1
# Create a matrix to hold expressibility values for each concept in each modality
expressibility_matrix <- matrix(runif(n_total_concepts * n_modalities, min = 0, max = 1), nrow = n_total_concepts, ncol = n_modalities)
# Randomly sample 21 unique concepts for each participant
final_data <- data.frame()
# Define a function to assign CommAtt and Eff for a single participant
simulate_participant <- function(participant_id) {
# Randomly sample 21 unique concepts from the total pool of 84
selected_concepts <- sample(1:n_total_concepts, n_concepts_per_participant)
participant_data <- data.frame()
trial_number <- 1  # Initialize trial number
for (concept_id in selected_concepts) {
# Randomly determine the modality for the concept
modality <- sample(c("gesture", "vocal", "combined"), 1)
# Calculate expressibility based on modality
expressibility_score <- ifelse(modality == "vocal", expressibility_matrix[concept_id, 1] * 0.6,
ifelse(modality == "gesture", expressibility_matrix[concept_id, 2],
expressibility_matrix[concept_id, 3] * 1.2))
# Determine Communicative Attempts based solely on expressibility, familiarity, and Big5
base_prob <- c(0.33, 0.33, 0.33)  # Equal chance for 1, 2, or 3 attempts
# Modify probabilities based on familiarity, Big5, and expressibility
adjusted_prob <- base_prob * c(1 - Familiarity[participant_id], # 3 times for each
1 - Familiarity[participant_id],
1 - Familiarity[participant_id]) *
c(1 - Big5[participant_id],
1 - Big5[participant_id],
1 - Big5[participant_id]) *
c(1 - expressibility_score,
1 - expressibility_score,
1 - expressibility_score)
# Normalize the adjusted probabilities
adjusted_prob <- adjusted_prob / sum(adjusted_prob)
# Sample the number of communicative attempts based on adjusted probabilities
n_attempts <- sample(1:3, 1, prob = adjusted_prob)
# Loop through the number of attempts and increment CommAtt correctly
for (attempt in 1:n_attempts) {
# Calculate Eff for the first attempt
if (attempt == 1) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
# Adjust Eff based on modality
if (modality == "combined") {
Eff <- Eff * 0.7  # Slight moderation for combined modality
}
}
# Adjust Eff for subsequent attempts
if (attempt == 2) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
Eff <- Eff * 1.50  # Multiply effort by 1.50 for the second attempt
} else if (attempt == 3) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
Eff <- Eff * 0.70  # Multiply effort by 0.70 for the third attempt
}
# Create row for each attempt
participant_data <- rbind(participant_data, data.frame(
Participant = participant_id,
Concept = concept_id,
Modality = modality,
Big5 = Big5[participant_id],
Familiarity = Familiarity[participant_id],
Expressibility = expressibility_score,
CommAtt = attempt,  # Correctly set the attempt number
Eff = Eff,
TrialNumber = trial_number  # Set trial number for this attempt
))
# Increment the trial number after each attempt
trial_number <- trial_number + 1
}
}
return(participant_data)
}
# Simulate data for all participants
for (i in participants) {
final_data <- rbind(final_data, simulate_participant(i))
}
# Preview the first few rows of the final data
head(final_data)
# Chunk 4
nrow(final_data)
# Chunk 5
final_data |>
janitor::tabyl(Participant, Concept)
# Chunk 6
# Load ggplot2
library(ggplot2)
# Sample data (replace this with your actual data)
# df <- data.frame(CommAtt = ..., Eff = ...)
# Create a boxplot comparing Effort across different Communicative Attempts
ggplot(final_data, aes(x = as.factor(CommAtt), y = Eff)) +
geom_boxplot(aes(fill = as.factor(CommAtt))) +  # Boxplot with fill based on CommAtt
labs(title = "Comparison of Effort Across Communicative Attempts",
x = "Communicative Attempts",
y = "Effort",
fill = "CommAtt") +
theme_minimal() +
theme(legend.position = "none")  # Optional: remove the legend
# Chunk 7
# Convert necessary columns to factors
final_data$CommAtt <- as.factor(final_data$CommAtt)
final_data$Modality <- as.factor(final_data$Modality)
final_data$Participant <- as.factor(final_data$Participant)
final_data$Concept <- as.factor(final_data$Concept)
final_data$TrialNumber <- as.numeric(final_data$TrialNumber)  # Ensure TrialNumber is numeric
# Chunk 8
contrasts(final_data$CommAtt) <- MASS::contr.sdif(3)
contrasts(final_data$Modality) <- contr.sum(3)/2
# Chunk 9
final_data$TrialNumber_c <- final_data$TrialNumber - median(range(final_data$TrialNumber))
range(final_data$TrialNumber_c)
range(final_data$TrialNumber)
# Chunk 10
final_data$Familiarity <- final_data$Familiarity - median(range(final_data$Familiarity))
final_data$Big5 <- final_data$Big5 - median(range(final_data$Big5))
# Chunk 11
final_data <-
final_data |>
mutate(Expressibility_z = (Expressibility - mean(Expressibility))/ sd(final_data$Expressibility, na.rm = T))
fit_eff5 <- brm(Eff ~ 1 + CommAtt + Modality + (1 | Participant) + (1 | Concept) + (1 | Familiarity) + (1 | Big5) + (1 | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
cores = 4)
saveRDS(fit_eff5, here("06_Modeling", "models", "fit_eff5.rds"))
beep(5)
# summary
summary(fit_eff5)
plot(fit_eff5)
plot(conditional_effects(fit_eff5), points = TRUE)
pp_check(fit_eff5, type = "dens_overlay")
pp_check(fit_eff5, type = "error_scatter_avg")
dag <- dagitty('dag {
Big5 [adjusted,pos="-0.823,0.657"]
CommAtt [exposure,pos="-1.033,0.028"]
Conc [adjusted,pos="-1.136,-0.848"]
Eff [outcome,pos="-0.102,0.025"]
Expr [adjusted,pos="-0.758,-0.850"]
Fam [adjusted,pos="-0.379,0.663"]
Mod_cat [adjusted,pos="-0.374,-0.850"]
Pcn [adjusted,pos="-0.589,1.214"]
TrNum [adjusted,pos="-1.686,-0.859"]
Big5 -> CommAtt
Big5 -> Eff
CommAtt -> Eff
Conc -> Expr
Expr -> CommAtt
Expr -> Eff
Fam -> CommAtt
Fam -> Eff
Mod_bin -> Eff
Mod_cat -> Expr
Pcn -> Big5
Pcn -> CommAtt
Pcn -> Eff
Pcn -> Fam
TrNum -> CommAtt
TrNum -> Eff
Conc -> CommAtt
Conc -> Eff
}')
plot(dag)
fit_eff6 <- brm(Eff ~ 1 + CommAtt + Modality + (1 + CommAtt | Participant) + (1 | Concept) + (1 + CommAtt | Familiarity) + (1 + CommAtt | Big5) + (1 + CommAtt | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
cores = 4)
saveRDS(fit_eff6, here("06_Modeling", "models", "fit_eff5.rds"))
beep(5)
# summary
summary(fit_eff6)
plot(fit_eff6)
plot(conditional_effects(fit_eff6), points = TRUE)
pp_check(fit_eff6, type = "dens_overlay")
pp_check(fit_eff6, type = "error_scatter_avg")
saveRDS(fit_eff6, here("06_Modeling", "models", "fit_eff6.rds"))
