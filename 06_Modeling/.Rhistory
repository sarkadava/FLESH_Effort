stat = "max",
prefix = "ppd") +
coord_cartesian(xlim = c(-20, 50)) +
ggtitle("Prior predictive distribution of maximal values")
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "max",
prefix = "ppd") +
coord_cartesian(xlim = c(-10, 15)) +
ggtitle("Prior predictive distribution of maximal values")
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "min",
prefix = "ppd") +
coord_cartesian(xlim = c(-15, 10)) +
ggtitle("Prior predictive distribution of minimal values")
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "mean",
bins = 50,
prefix = "ppd") +
coord_cartesian(xlim = c(-20, 20)) +
ggtitle("Prior predictive distribution of means")
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "mean",
bins = 50,
prefix = "ppd") +
coord_cartesian(xlim = c(-10, 10)) +
ggtitle("Prior predictive distribution of means")
pp_check(fit_eff9_priors_t, type = "dens_overlay", ndraws = 100)
# Define the priors using Student's t-distribution for fixed effects
priors_eff_t <- c(
# Prior for the intercept
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
# Priors for the main effects
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z"),
#set_prior("normal(0,0.15)", class = "sd", group = "TrialNumber_c"),   # Random effect for Trial Number (Intercept)
set_prior("normal(0.5,0.1)", class = "sd", group = "TrialNumber_c"),
# Varying effects for Participant
#set_prior("cauchy(0, 1)", class = "sd", group = "Participant"),
# Varying effects for Concept
#set_prior("cauchy(0, 1)", class = "sd", group = "Concept"),
# Priors for random effects standard deviations
#set_prior("cauchy(0, 1)", class = "sd"),
#set_prior("normal(0, 0.20)", class = "sd", group = "Participant", lb = 0),
#set_prior("normal(0, 0.20)", class = "sd", group = "Concept", lb = 0),
#set_prior("normal(0, 0.20)", class = "sd", lb = 0),
set_prior("normal(0.5,0.1)", class = "sd", group = "Participant"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Concept"),
set_prior("normal(1,0.1)", class = "sd"),
# Prior for residual standard deviation (sigma)
#set_prior("normal(0, 2.5)", class = "sigma", lb = 0),
set_prior("normal(0.5,0.25)", class = "sigma"),
prior("lkj(2)", class = "cor") # lkj assumes no extreme correlation
)
fit_eff9_priors_t <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,#
sample_prior = 'only',
cores = 4)
pp_check(fit_eff9_priors_t, type = "dens_overlay", ndraws = 100)
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "mean",
bins = 50,
prefix = "ppd") +
coord_cartesian(xlim = c(-10, 10)) +
ggtitle("Prior predictive distribution of means")
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "min",
prefix = "ppd") +
coord_cartesian(xlim = c(-15, 10)) +
ggtitle("Prior predictive distribution of minimal values")
pp_check(fit_eff9_priors_t,
type = "stat",
stat = "max",
prefix = "ppd") +
coord_cartesian(xlim = c(-10, 15)) +
ggtitle("Prior predictive distribution of maximal values")
fit_eff10 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,
iter = 4000,
cores = 4)
saveRDS(fit_eff10, here("06_Modeling", "models", "fit_eff10.rds"))
saveRDS(fit_eff10, here("06_Modeling", "models", "fit_eff10.rds"))
# SUMMARY
summary(fit_eff10)
# PLOT COEFFS
plot(fit_eff10)
plot(conditional_effects(fit_eff10), points = TRUE)
# PP CHECK
pp_check(fit_eff10, type = "dens_overlay", ndraws = 100)
## PP CHECK WITH SUMMARY STATS
pp_check(fit_eff10,
type = "stat",
stat = "mean",
bins = 50,
prefix = "ppd") +
coord_cartesian(xlim = c(-10, 10)) +
ggtitle("Prior predictive distribution of means")
## PP CHECK WITH SUMMARY STATS
pp_check(fit_eff10,
type = "stat",
stat = "mean",
bins = 50,
prefix = "ppd") +
ggtitle("Prior predictive distribution of means")
## PP CHECK WITH SUMMARY STATS
pp_check(fit_eff10,
type = "stat",
stat = "mean",
bins = 50)
pp_check(fit_eff10,
type = "stat",
stat = "min",
bins 50)
pp_check(fit_eff10,
type = "stat",
stat = "min",
bins = 50)
pp_check(fit_eff10,
type = "stat",
stat = "max",
bins = 50)
## PP CHECK FOR RESIDUALS
pp_check(fit_eff10, type = "error_scatter_avg")
# Define the priors
priors_eff7 <- c(
prior(normal(2.5, 1), class = "Intercept"),                    # Prior for the intercept (baseline Effort)
prior(normal(0, 1.5), class = "b", coef = "CommAtt2M1"),           # Prior for CommAtt level 2
prior(normal(0, 1.5), class = "b", coef = "CommAtt3M2"),           # Prior for CommAtt level 3
prior(normal(0, 0.5), class = "b", coef = "Modality1"),                # Prior for Modality level 1
prior(normal(0, 0.5), class = "b", coef = "Modality2"),                # Prior for Modality level 2
prior(normal(0, 0.5), class = "sd", group = "Participant"),      # Random effect for Participant (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Concept"),          # Random effect for Concept (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Familiarity"),     # Random effect for Familiarity (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Big5"),            # Random effect for Big5 (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Expressibility_z"), # Random effect for Expressibility (Intercept)
prior(normal(0, 0.5), class = "sd", group = "TrialNumber_c"),   # Random effect for Trial Number (Intercept)
prior(exponential(1), class = "sigma"),                           # Prior for residuals
prior(lkj(4), class = "cor")
)
# fit model
fit_eff7 <- brm(Eff ~ 1 + CommAtt + Modality + (1 + CommAtt | Participant) + (1 | Concept) + (1 + CommAtt | Familiarity) + (1 + CommAtt | Big5) + (1 + CommAtt | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
prior = priors_eff7,
cores = 4)
saveRDS(fit_eff7, here("06_Modeling", "models", "fit_eff7.rds"))
beep(5)
priors_eff8 <- c(
prior(normal(2.5, 1), class = "Intercept"),                    # Prior for the intercept (baseline Effort)
prior(normal(0, 1.5), class = "b", coef = "CommAtt2M1"),           # Prior for CommAtt level 2
prior(normal(0, 1.5), class = "b", coef = "CommAtt3M2"),           # Prior for CommAtt level 3
prior(normal(0, 0.5), class = "b", coef = "Modality1"),                # Prior for Modality level 1
prior(normal(0, 0.5), class = "b", coef = "Modality2"),                # Prior for Modality level 2
prior(normal(0, 0.5), class = "b", coef = "Familiarity"),
prior(normal(0, 0.5), class = "b", coef = "Expressibility_z"),
prior(normal(0, 0.5), class = "b", coef = "Big5"),
prior(normal(0, 0.5), class = "sd", group = "Participant"),      # Random effect for Participant (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Concept"),          # Random effect for Concept (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Familiarity"),     # Random effect for Familiarity (Intercept)
prior(normal(0, 0.5), class = "sd", group = "Expressibility_z"), # Random effect for Expressibility (Intercept)
prior(normal(0, 0.5), class = "sd", group = "TrialNumber_c"),   # Random effect for Trial Number (Intercept)
prior(exponential(1), class = "sigma"),                           # Prior for residuals
prior(lkj(4), class = "cor")
)
fit_eff8 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 | Concept) + (1 + CommAtt | Familiarity) + (1 | Big5) + (1 | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
prior = priors_eff8,
cores = 4)
saveRDS(fit_eff8, here("06_Modeling", "models", "fit_eff8.rds"))
beep(5)
fit_eff9 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 | Concept)  + (1 | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
prior = priors_eff8,
cores = 4)
priors_eff9 <- c(
# Prior for the intercept
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
# Priors for the main effects using Student's t-distribution
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z"),
set_prior("gamma(2,1)", class = "sd", group = "TrialNumber_c"),
set_prior("gamma(2, 1)", class = "sd", group = "Participant"), # let's try gamma because it limits the negative values a bit better
set_prior("gamma(2, 1)", class = "sd", group = "Concept"),
set_prior("gamma(2, 1)", class = "sd"),
# Prior for residual standard deviation (sigma)
#set_prior("normal(0, 2.5)", class = "sigma", lb = 0),
set_prior("gamma(2, 1)", class = "sigma"),
prior("lkj(2)", class = "cor") # lkj assumes no extreme correlation
)
fit_eff9 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 | Concept)  + (1 | Expressibility_z) + (1 | TrialNumber_c),
data = final_data,
prior = priors_eff9,
cores = 4)
saveRDS(fit_eff9, here("06_Modeling", "models", "fit_eff9.rds"))
beep(5)
prior_summary(fit_eff9)
install.packages('see')
library(here)
library(dagitty) # for dag
library(dplyr) # for data-wrangling
library(lme4)  # for linear mixed-effects models
library(tidyr)  # for reshaping data (if needed)
library(ggplot2)
library(ggplot2)
library(patchwork)
library(bayesplot)
library(brms)
library(beepr)
# use all available cores for parallel computing
options(mc.cores = parallel::detectCores())
fit_eff10 <- readRDS(here("06_Modeling", "models", "fit_eff10.rds"))
bayes_R2(fit_eff10)
# R^2 explained variance
fit_eff10_R2 <- bayes_R2(fit_eff10)
library(here)
library(dagitty) # for dag
library(dplyr) # for data-wrangling
library(lme4)  # for linear mixed-effects models
library(tidyr)  # for reshaping data (if needed)
library(ggplot2)
dag <- dagitty('dag {
Big5 [adjusted,pos="-0.823,0.657"]
CommAtt [exposure,pos="-1.033,0.028"]
Conc [adjusted,pos="-1.136,-0.848"]
Eff [outcome,pos="-0.102,0.025"]
Expr [adjusted,pos="-0.758,-0.850"]
Fam [adjusted,pos="-0.379,0.663"]
Mod_cat [adjusted,pos="-0.374,-0.850"]
Pcn [adjusted,pos="-0.589,1.214"]
TrNum [adjusted,pos="-1.686,-0.859"]
Big5 -> CommAtt
Big5 -> Eff
CommAtt -> Eff
Conc -> Expr
Expr -> CommAtt
Expr -> Eff
Fam -> CommAtt
Fam -> Eff
Mod_bin -> Eff
Mod_cat -> Expr
Pcn -> Big5
Pcn -> CommAtt
Pcn -> Eff
Pcn -> Fam
TrNum -> CommAtt
TrNum -> Eff
Conc -> CommAtt
Conc -> Eff
}')
plot(dag)
# Set seed for reproducibility
set.seed(0209)
# Define participants, total unique concepts, and modalities
n_participants <- 120
n_total_concepts <- 21  # Total unique concepts
n_concepts_per_participant <- 21  # Each participant works with 21 concepts
n_modalities <- 3  # gesture, vocal, combined
# Generate participant IDs
participants <- 1:n_participants
# Simulate Big5 personality traits (standardized between 0 and 1) and Familiarity (between 0 and 1) for participants
Big5 <- runif(n_participants, min = 0, max = 1)  # Continuous values between 0 and 1
Familiarity <- runif(n_participants, min = 0, max = 1)  # Continuous values between 0 and 1
# Create a matrix to hold expressibility values for each concept in each modality
expressibility_matrix <- matrix(runif(n_total_concepts * n_modalities, min = 0, max = 1), nrow = n_total_concepts, ncol = n_modalities)
# Randomly sample 21 unique concepts for each participant
final_data <- data.frame()
# Define a function to assign CommAtt and Eff for a single participant
simulate_participant <- function(participant_id) {
# Randomly sample 21 unique concepts from the total pool of 84
selected_concepts <- sample(1:n_total_concepts, n_concepts_per_participant)
participant_data <- data.frame()
trial_number <- 1  # Initialize trial number
for (concept_id in selected_concepts) {
# Randomly determine the modality for the concept
modality <- sample(c("gesture", "vocal", "combined"), 1)
# Calculate expressibility based on modality
expressibility_score <- ifelse(modality == "vocal", expressibility_matrix[concept_id, 1] * 0.6,
ifelse(modality == "gesture", expressibility_matrix[concept_id, 2],
expressibility_matrix[concept_id, 3] * 1.2))
# Determine Communicative Attempts based solely on expressibility, familiarity, and Big5
base_prob <- c(0.33, 0.33, 0.33)  # Equal chance for 1, 2, or 3 attempts
# Modify probabilities based on familiarity, Big5, and expressibility
adjusted_prob <- base_prob * c(1 - Familiarity[participant_id], # 3 times for each
1 - Familiarity[participant_id],
1 - Familiarity[participant_id]) *
c(1 - Big5[participant_id],
1 - Big5[participant_id],
1 - Big5[participant_id]) *
c(1 - expressibility_score,
1 - expressibility_score,
1 - expressibility_score)
# Normalize the adjusted probabilities
adjusted_prob <- adjusted_prob / sum(adjusted_prob)
# Sample the number of communicative attempts based on adjusted probabilities
n_attempts <- sample(1:3, 1, prob = adjusted_prob)
# Loop through the number of attempts and increment CommAtt correctly
for (attempt in 1:n_attempts) {
# Calculate Eff for the first attempt
if (attempt == 1) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
# Adjust Eff based on modality
if (modality == "combined") {
Eff <- Eff * 0.7  # Slight moderation for combined modality
}
}
# Adjust Eff for subsequent attempts
if (attempt == 2) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
Eff <- Eff * 1.50  # Multiply effort by 1.50 for the second attempt
} else if (attempt == 3) {
Eff <- 1.15 * Big5[participant_id] +
1.10 * Familiarity[participant_id] +
1.20 * expressibility_score +
rnorm(1, mean = 1, sd = 0.5)
Eff <- Eff * 0.70  # Multiply effort by 0.70 for the third attempt
}
# Create row for each attempt
participant_data <- rbind(participant_data, data.frame(
Participant = participant_id,
Concept = concept_id,
Modality = modality,
Big5 = Big5[participant_id],
Familiarity = Familiarity[participant_id],
Expressibility = expressibility_score,
CommAtt = attempt,  # Correctly set the attempt number
Eff = Eff,
TrialNumber = trial_number  # Set trial number for this attempt
))
# Increment the trial number after each attempt
trial_number <- trial_number + 1
}
}
return(participant_data)
}
# Simulate data for all participants
for (i in participants) {
final_data <- rbind(final_data, simulate_participant(i))
}
# Preview the first few rows of the final data
head(final_data)
nrow(final_data)
final_data |>
janitor::tabyl(Participant, Concept)
# Sample data (replace this with your actual data)
# df <- data.frame(CommAtt = ..., Eff = ...)
# Create a boxplot comparing Effort across different Communicative Attempts
ggplot(final_data, aes(x = as.factor(CommAtt), y = Eff)) +
geom_boxplot(aes(fill = as.factor(CommAtt))) +  # Boxplot with fill based on CommAtt
labs(title = "Comparison of Effort Across Communicative Attempts",
x = "Communicative Attempts",
y = "Effort",
fill = "CommAtt") +
theme_minimal() +
theme(legend.position = "none")  # Optional: remove the legend
# Convert necessary columns to factors
final_data$CommAtt <- as.factor(final_data$CommAtt)
final_data$Modality <- as.factor(final_data$Modality)
final_data$Participant <- as.factor(final_data$Participant)
final_data$Concept <- as.factor(final_data$Concept)
final_data$TrialNumber <- as.numeric(final_data$TrialNumber)  # Ensure TrialNumber is numeric
contrasts(final_data$CommAtt) <- MASS::contr.sdif(3)
contrasts(final_data$Modality) <- contr.sum(3)/2
final_data$TrialNumber_c <- final_data$TrialNumber - median(range(final_data$TrialNumber))
range(final_data$TrialNumber_c)
range(final_data$TrialNumber)
final_data$Familiarity <- final_data$Familiarity - median(range(final_data$Familiarity))
final_data$Big5 <- final_data$Big5 - median(range(final_data$Big5))
final_data <-
final_data |>
group_by(Modality) |>
mutate(Expressibility_z = (Expressibility - mean(Expressibility))/ sd(final_data$Expressibility, na.rm = T)) |>
ungroup()
View(final_data)
View(final_data)
priors_eff_t <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z"),
set_prior("normal(0.5,0.1)", class = "sd", group = "TrialNumber_c"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Participant"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Concept"),
set_prior("normal(1,0.1)", class = "sd"),
set_prior("normal(0.5,0.25)", class = "sigma"),
set_prior("lkj(2)", class = "cor") # lkj assumes no extreme correlation
)
fit_eff9_priors_t <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,#
sample_prior = 'only',
cores = 4)
priors_eff_t <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility_z"),
set_prior("normal(0.5,0.1)", class = "sd", group = "TrialNumber_c"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Participant"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Concept"),
set_prior("normal(1,0.1)", class = "sd"),
set_prior("normal(0.5,0.25)", class = "sigma"),
set_prior("lkj(2)", class = "cor") # lkj assumes no extreme correlation
)
fit_eff10 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility_z +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,
iter = 4000,
cores = 4,
control = list(max_treedepth = 12,
adapt_delta = 0.99))
saveRDS(fit_eff10, here("06_Modeling", "models", "fit_eff10.rds"))
# R^2 explained variance
fit_eff10_R2 <- bayes_R2(fit_eff10)
# Save the R² output
saveRDS(fit_eff10_R2, file = paste0(models, "fit_eff10_R2.rds"))
# Save the R² output
saveRDS(fit_eff10_R2, here("06_Modeling", "models", "fit_eff10_R2.rds"))
fit_eff10_R2
# SUMMARY
summary(fit_eff10)
fit_eff10 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,
iter = 4000,
cores = 4,
control = list(max_treedepth = 12,
adapt_delta = 0.99))
priors_eff_t <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility"),
set_prior("normal(0.5,0.1)", class = "sd", group = "TrialNumber_c"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Participant"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Concept"),
set_prior("normal(1,0.1)", class = "sd"),
set_prior("normal(0.5,0.25)", class = "sigma"),
set_prior("lkj(2)", class = "cor") # lkj assumes no extreme correlation
)
fit_eff10 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility +  (1 + CommAtt | Participant) + (1 + CommAtt | Concept) + (1 | TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,
iter = 4000,
cores = 4,
control = list(max_treedepth = 12,
adapt_delta = 0.99))
# SUMMARY
summary(fit_eff10)
priors_eff_t <- c(
set_prior("normal(2.5, 0.5)", class = "Intercept", lb=0),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt2M1"),
set_prior("normal(0,0.50)", class = "b", coef = "CommAtt3M2"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality1"),
set_prior("normal(0,0.25)", class = "b", coef = "Modality2"),
set_prior("normal(0,0.25)", class = "b", coef = "Big5"),
set_prior("normal(0,0.25)", class = "b", coef = "Familiarity"),
set_prior("normal(0,0.25)", class = "b", coef = "Expressibility"),
set_prior("normal(0.5,0.1)", class = "sd", group = "TrialNumber_c"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Participant"),
set_prior("normal(0.5,0.1)", class = "sd", group = "Concept"),
set_prior("normal(1,0.1)", class = "sd"),
set_prior("normal(0.5,0.25)", class = "sigma")
#set_prior("lkj(2)", class = "cor") # lkj assumes no extreme correlation
)
fit_eff10 <- brm(Eff ~ 1 + CommAtt + Modality + Big5 + Familiarity + Expressibility +  (1 + CommAtt || Participant) + (1 + CommAtt || Concept) + (1 || TrialNumber_c),
data = final_data,
prior=priors_eff_t,
family = gaussian,
iter = 4000,
cores = 4,
control = list(max_treedepth = 13,
adapt_delta = 0.99))
